FORMAT: 1A
HOST: http://private-1f4d5e-grishko.apiary-mock.com
AUTHOR: FRUITWARE

# Grishkoshop API
> *Documentation written in english to stay in consistenct with common standarts*

API documentation for Android and iOS Application **«Grishko Shop — Pointe Shoes Smart Fitting»**

## Useful links

* **General API description**: https://docs.google.com/document/d/1PEUBuXbwsX-TM_rE_t4RATIioE25PqDGADb7sgrcoE8/edit#
* **Tech Specs**: https://docs.google.com/document/d/1uXg0DRWDcFajCsGXkjRdT9jvbvBh6yvmUER1uULSPjA/edit#
* **Design**: https://marvelapp.com/67d1d07/screen/51557448
* **API link**: _waiting from development_

## Dictionary Data
> *Specific listings of given values, grabbed from **https://grishkoshop.com***

### Countries List

* US — USA
* GB — United Kingdom
* KR — Repulic of Korea
* AUS — Australia
* JP — Japan
* DE — Germany, EU
* FR — France
* ES — Spain
* CA — Canada
* BR — Brazil
* BS — Bahamas
* BT — Bhutan
* BW — Botswana
* BY — Belarus
* BZ — Belize
* KE — Kenya
* KG — Kyrgyzstan
* KH — Cambodia
* KI — Kiribati
* KM — Comoros
* KP — North Korea
* GA — Gabon
* UY — Uruguay
* UZ — Uzbekistan
* VA — Vatican
* VC — Saint Vincent and the Grenadines
* VE — Venezuela
* VG — British Virgin Islands
* VI — U.S. Virgin Islands
* VN — Vietnam
* VU — Vanuatu
* WF — Wallis and Futuna
* WS — Samoa
* XK — Kosovo
* YE — Yemen
* YT — Mayotte
* ZA — South Africa
* ZM — Zambia
* ZW — Zimbabwe
* CC — Cocos Islands
* CD — Democratic Republic of the Congo
* CF — Central African Republic
* CG — Republic of the Congo
* CI — Ivory Coast
* CK — Cook Islands
* CL — Chile
* CM — Cameroon
* CN — China
* CO — Columbie
* CR — Costa Rica
* CU — Cuba
* CV — Cape Verde
* CX — Christmas Island
* CY — Cyprus, EU
* CZ — Czech Republic
* AW — Aruba
* AZ — Azerbaijan
* BA — Bosnia and Herzegovina
* BB — Barbados
* BD — Bangladesh
* BE — Belgium
* BF — Burkina Faso
* BG — Bulgaria
* BH — Bahrain
* BI — Burundi
* BJ — Benin
* BM — Bermuda
* BN — Brunei
* BO — Bolivia
* AD — Andora
* AE — UAE
* AF — Afganistan
* AG — Antigua and Barbuda
* AI — Anguilla
* AL — Albania
* AN — Netherlands Antilles
* AO — Angola
* AR — Argentina
* AS — American Samoa
* AT — Austria
* EST — Estonia
* ET — Ethiopia
* FI — Finland
* FJ — Fiji
* FK — Falkland Islands
* FM — Micronesia
* FO — Faroe Islands
* DJ — Djibouti
* DK — Denmark
* DM — Dominica
* DO — Dominican Republic
* DZ — Algeria
* EC — Ecuador
* EG — Egypt
* EH — Western Sahara
* ER — Eritrea
* GD — Grenada
* GE — Georgia
* GH — Ghana
* GI — Gibraltar
* GM — Gambia
* GN — Guinea
* GQ — Equatorial Guinea
* GR — Greece
* GT — Guatemala
* GU — Guam
* GW — Guinea-Bissau
* GY — Guyana
* HK — Hong Kong
* HN — Honduras
* HR — Croatia
* HT — Haiti
* HU — Hungary
* CH — Switzerland
* CHN — China
* ID — Indonesia
* IE — Ireland
* IL — Izrael
* IN — India
* IO — British Indian Ocean Territory
* IQ — Iraq
* IR — Iran
* IS — Island
* IT — Italy
* JM — Jamaica
* JO — Jordan
* KW — Kuwait
* KY — Cayman Islands
* KZ — Kazakhstan
* LA — Laos
* LB — Lebanon
* LC — Saint Lucia
* LI — Liechtenstein
* LK — Sri Lanka
* LR — Liberia
* LS — Lesotho
* LT — Lithuania
* LU — Luxembourg
* LV — Latvia
* LY — Libya
* M — Malta, EU
* MA — Morocco
* MC — Monako
* MD — Moldova
* ME — Montenegro (Republic of Montenegro)
* MG — Madagascar
* MH — Marshall Islands
* MK — Makedonia
* ML — Mali
* MM — Myanmar
* MN — Mongolia
* MP — Northern Mariana Islands
* MR — Mauritania
* MU — Mauritius
* MV — Maldives
* MW — Malawi
* MX — Mexico
* MY — Malaysia
* MZ — Mozambique
* NA — Namibia
* NC — New Caledonia
* NE — Niger
* NG — Nigeria
* NI — Nicaragua
* NL — Netherlands
* NO — Norway
* NP — Nepal
* NR — Nauru
* NU — Niue
* NZ — New Zeland
* OM — Oman
* PA — Panama
* PE — Peru
* PF — French Polynesia
* PG — Papua New Guinea
* PH — Philippines
* PK — Pakistan
* PL — Poland
* PR — Puerto Rico
* PS — Palestine
* PT — Portugal
* PW — Palau
* PY — Paraguay
* QA — Qatar
* RE — Reunion
* RO — Romania
* RS — Serbia
* RU — Russia
* RW — Rwanda
* SA — Saudi Arabia
* SB — Solomon Islands
* SC — Seychelles
* SD — Sudan
* SE — Sweden
* SG — Singapore
* SI — Slovenia
* SJ — Svalbard and Jan Mayen
* SK — Slovakia
* SL — Sierra Leone
* SM — San Marino
* SN — Senegal
* SO — Somalia
* SR — Suriname
* ST — Sao Tome and Principe
* STC — Scotland
* SV — El Salvador
* SY — Syria
* SZ — Swaziland
* TC — Turks and Caicos Islands
* TD — Chad
* TG — Togo
* TH — Thailand
* TJ — Tajikistan
* TK — Tokelau
* TL — East Timor
* TM — Turkmenistan
* TN — Tunisia
* TO — Tonga
* TR — Turkey
* TT — Trinidad and Tobago
* TV — Tuvalu
* TW — Taiwan
* TZ — Tanzania
* UA — Ukraine
* UG — Uganda

### US and Canada States List

* AL — Alabama, US
* AK — Alaska, US
* AZ — Arizona, US
* AR — Arkansas, US
* AA — Armed Forces America
* AE — Armed Forces Europe
* AP — Armed Forces Pacific
* CB — British Columbia, CA
* CA — California, US
* CO — Colorado, US
* CT — Connecticut, US
* DE — Delaware, US
* DC — District of Columbia, US
* FL — Florida, US
* GA — Georgia, US
* HI — Hawaii, US
* ID — Idaho, US
* IL — Illinois, US
* IN — Indiana, US
* IA — Iowa, US


# Data Structures


## User (object)

+ id: 1 (number, required)
+ email: test@fruitware.ru (string, required)
    Valid email address
+ cellphone: `+70951234578` (string, required)
    International mobile phone number
+ first_name: `Ted` (string)
    First name
+ last_name: `Hancock` (string)
    Last name
+ password: `qwerty` (string)
    Used to register user only. Not needed in responses.
+ password2: `qwerty` (string)
    Used to register user only. Should match first password. Not needed in responses.
+ country: `RU` (enum[string], required)
    Value from the Countries dictionary
+ state: `AL` (enum[string], optional)
    Value from the Countries dictionary used only when US country selected
+ phone: `+3731234567890` (string, optional)
    International phone number
+ type (enum[string], required)
    Customer type — physical person or legal entity
    
    + Default: `personal`
    
    + Members
        + `personal`
        + `company`
        
+ email_status: true (boolean, required)
    E-mail subscription status
+ company_name: `Some Cool LLC` (string, optional)
    Required only if type is **company**
+ company_identity: `223233232` (string, optional)
    Required only if type is **company**
+ company_vat_number: `223233232` (string, optional)
    Required only if type is **company**
+ smartfitting_done: true (boolean, required)
    if customer used fitting mechanism
+ smartfitting_date: `2018.12.24 23:10:10` (string, optional)
    Date and time when fitting was stored
+ smartfitting_lsize: `1/2` (string, optional)
    stored GRISHKO ® SIZE for left foot
+ smartfitting_rsize: `1/2` (string, optional)
    stored GRISHKO ® SIZE for right foot
+ smartfitting_lvamp: 65 (number, optional)
    Vamp height for left foot in mm
+ smartfitting_rvamp: 65 (number, optional)
    Vamp height for left foot in mm
+ smartfitting_shank (enum[string], optional)
    The pointe shoe insole shank

    + Default: `SF`
    
    + Members
        + `S`
            soft
        + `M`
            medium
        + `H`
            hard
        + `SS`
            super soft
        + `SH`
            super hard
        + `LM`
            light medium
        + `LH`
            light hard
        + `SF`
            soft flexible
        + `MF`
            medium flexible
        + `SHF`
            super hard flexible

+ created_at: `2018.12.24 23:10:10` (string, required)
    Registration Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last profile update Date and Time. Default value is equal to created_at property

## Address (object)

+ id: 2 (number, required)
+ user_id: User.id (required)
    Parent User object
+ type: `billing` (enum[string], required)
    
    + Members
    
        + `delivery`

+ firstname: `John` (string, required)
+ lastname: `John` (string, required)
+ company_name: `Some Cool LLC` (string, optional)
    Required only for the **Company** account
+ company_identity: `223233232` (string, optional)
    Required only for the **Company** account
+ company_vat_number: `223233232` (string, optional)
    Required only for the **Company** account
+ country: `RU` (enum[string], required)
    Value from the Countries dictionary
+ state: `AL` (enum[string], optional)
    Value from the Countries dictionary used only when US country selected
+ city: `London` (string, required)
+ street: `Baker Street` (string, optional)
+ house: `13/b` (string, required)
    Street house number with a possible index, modificator etc.
+ app: `1` (string, optional)
    Appartment or office room number
+ zipcode: `20567` (string, required)
    ZIP-code of the given address
+ cellphone: `+709512345678` (string, optional)
    International mobile phone number
+ phone: `+3731234567890` (string, optional)
    International phone number



## Product (object)

+ id: 123 (number, required)
+ name: `0509 GRISHKO 2007` (string, required)
+ vendor_code: `0509/2` (string, required)
+ teaser: `The model has a U-shaped medium vamp and slightly tapered box shape. LAST TYPE: Grishko-2007` (string, required)
+ thumbnail: `https://grishkoshop.com/App_Firma/Data/Products/0100000000000028_1_0509_Grishko-2007_jpg_636691639230000000.jpg` (string, required)
+ has_gallery: true (boolean, required)
+ gallery: [`https://grishkoshop.com/App_Firma/Data/Products/0100000000000028_1_0509_Grishko-2007_jpg_636691639230000000.jpg`,`https://grishkoshop.com/App_Firma/Data/Products/0100000000000028_1_0509_Grishko-2007_jpg_636691639230000000.jpg`] (array, optional)
+ price: 345.78 (number, required)
    Price without VAT
+ price_vat: 414.94 (number, required)
    Full price with VAT
+ currency: `USD` (string, required)
    Currency can vary depending on country
+ age_group: `adult` (string, optional)
+ gender: `male` (string, optional)
+ colour: `pink` (string, optional)
+ type (enum[string], required)

    + Default: `pointe`
    
    + Members
        + `pointe`
        + `accessory`
        + `wear`
+ category: Category.id
    Related primary Category ID
+ created_at: `2018.12.24 23:10:10` (string, required)
    Date and time of transportation request
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Date and time of last updated
    
## Category (object)

+ id: 123 (number, required)
+ parent_id: Category.id (optional)
    parent category id if exists
+ name: `LEOTARDS` (string, required)
    category name
+ description: `Wide choice of perfect fitted leotards by Grishko enables you to stand out during rehearsals and to emphasize your bright individuality and impeccable taste.` (string, required)
    category description
+ created_at: `2018.12.24 23:10:10` (string, required)
    Date and time of creation
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Date and time of last update


## Order (object)

+ id: 123 (number, required)
+ user_id: User.id (required)
    related customer profile
+ currency: `EUR` (string, required)
    order currency *applyable* to all order prices and amount
+ delivery_method: `ups` (string, required)
    Delivery method name, used as the string to avoid dropped relations
+ delivery_price: 12 (number, required)
+ delivery_free: false (boolean, required)
+ delivery_free_limit: 120 (number, optional)
    minimal sum of order to get free delivery if there is free delivery option enabled
+ delivery_alltogether: true (boolean, required)
    to delivery items separatelly or only alltogether
+ payment_method (enum[string], required)
    
    + Default: `creditcard`
    
    + Members
        + `creditcard`
        + `paypal`
        + `cash`

+ discount_applied: true (boolean, required)
+ discount_code: `BLACKFRIDAY` (string, optional)
    Some discount code, applicated to this order
+ discount_amount: 234 (number, optional)
+ discount_currency: `EUR` (string, optional)
+ note: `some note` (string, optional)
+ array[object]
    
    + Attributes
        + product_id: Product.id (required)
            Related product ID
        + product_title: `MIRACLE POINTE SHOES` (string, required)
            Related product Name
        + width: `XX` (enum[string], optional)
            Optional parametr applicable for some products
        + size: 0.5 (enum[number], optional)
            Optional parametr applicable for some products
        + Shank: `LM` (enum[number], optional)
            Optional parametr applicable for some products
        + quantity: 3 (number, required)
        + price: 23 (number, required)
        + price_vat: 27.6 (number, required)
        + amount: 69 (number, required)
        + amount_vat: 82.8 (number, required)
        + delivered_number: 0 (number, required)
            Number of delivered products (e.g. customer ordered 10 pairs and till now got 6)
        + array[object]
        
            + Attributes
                + option_name: `color` (string, required)
                + option_value: `pink` (string, required)
+ billing_address: Address.id
    related billing address
+ delivery_address: Address.id
    related delivery address
+ tracking_number: `2337d787d728h3` (string, optional)
    Number given by delivery service
+ tracking_url: `https://ups.com/check/2337d787d728h3` (string, optional)
    URL on delivery service website to track parsel
+ status (enum[string], required)
  
    + Default: `pending`
    
    + Members
        + `pending`
        + `processing`
        + `failed`
        + `completed`
        + `dispatched`
        + `paid`
        + `cancelled`
        + `refunded`
        + `sent`
        
+ created_at: `2018.12.24 23:10:10` (string, required)
    Date and time of creation
+ dispatched_at: `2018.12.24 23:10:10` (string, optional)
    Date and time of parsel's dispatch
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Date and time of last update

# Group User
In general application doesn't allow any usage without authentification.

Sequence of actions depends on client flow and is covered by exhaustive variety of scenarios below:
* **Customer opened the app for the very first time**:
    1. **POST:** `/user/register` User is required to fill several basic fields to register;
    2. *Server validates email and confirm it's registered*;
* **Customer was registered previously inside the app**:
    1. **POST:** `/user/login` To login into the app
    3. *Server validates email and password*;
    4. **POST:** `/user/remind` in case user lost the password, the app can call the server-side and initiate password reset procedure;
    5. **POST:** `/user/logout` logging user out and closing the session;
    6. *After login or registration server returns the Authorization Token with unlimited term of valiability + User data*;

## Auth process [/user/login]
Method to login with email and password either from the website or from the app.

### Login the user [POST]

+ Request (application/json)

    + Attributes
        + email: `john.doe@fruitware.ru` (string, required)
        + password: `1223dasefe` (string, required)
    
+ Response 200 (application/json)

    + Attributes
        + token: `d015ac61626bf2e1c67d8828945b0f53` (required,string)
            Identification token. Unique single-per-user 32-symbol code to identify successfully logged in User.
        + user (User, required)
            User's object with current stored values

        
## Register process [/user/register]
Method to create a new customer's account

### Register customer [POST]

+ Request (application/json)

    + Attributes
        + email: `john.doe@fruitware.ru` (string, required)
        + first_name: `John` (string, required)
        + last_name: `Doe` (string, required)
        + password: `1223dasefe` (string, required)
    
+ Response 200 (application/json)

    + Attributes
        + token: `d015ac61626bf2e1c67d8828945b0f53` (required,string)
            Identification token. Unique single-per-user 32-symbol code to identify successfully logged in User.
        + user (User, required)
            User's object with current stored values

        
## Remind password process [/user/remind]
Method to reset password

### Reset [POST]

+ Request (application/json)

    + Attributes
        + email: `john.doe@fruitware.ru` (string, required)

+ Response 200 (application/json)

    + Attributes
        + status: true (boolean, required)
            Update status
        + message: `You'll receive an email with instructions soon` (string, required)
            Some message to describe error OR confirm the reset


## User's profile [/user]
> **This methods require token and can be requested only after authorization**
Application can show User's data and able to edit some of this data


### Get User's profile [GET]

+ Request (application/json)

    + Attributes
        + token: `d015ac61626bf2e1c67d8828945b0f53` (required,string)
            Identification token. Unique single-per-user 32-symbol code to identify successfully logged in User.
    
+ Response 200 (application/json)

    + Attributes
        + user (User, required)
            User's object with current stored values
            

### Update User's profile [POST]

+ Request (application/json)

    + Attributes
        + token: `098f6bcd4621d373cade4e832627b4f6` (required,string)
            Identification token. Unique single-per-user 32-symbol code to identify successfully logged in User.
        + user (User, required)
            User's object with updated data

+ Response 200 (application/json)

    + Attributes
        + status: true (boolean, required)
            Update status
        + message: `Your profile was updated` (string, required)
            Some message to describe error OR confirm the update
        + user (User, required)
            User's object with current stored values

## User Logout [/user/logout]
Method to log user out

### Request user logout [POST]

+ Request (application/json)

    + Attributes
        + token: `d015ac61626bf2e1c67d8828945b0f53` (required,string)
            Identification token. Unique single-per-user 32-symbol code to identify successfully logged in User.

+ Response 200 (application/json)

    + Attributes
        + is_logged_out: true (required,boolean)
            Session was dropped

# Group Product endpoints

Methods to interact with collection of Products or with single product
Basically all product data can be received from this method

> **Important! Any request update can be possible if the App has an active internet connection.**


## Get all products [GET /products]

By default no JSON-object in body required.
Depending on parameters, sent in Body JSON Server will return only suitable products which conduct sent conditions.
Meanwhile Accept-Language, Token and Country are required to be passed in header. It affects price, avaluability and content.

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

    + Body
        
            {
                "category_id": 13,
                "fitting": {
                    "size": 2.5,
                    "width": "XXX",
                    "shank": "SS"
                }
            }

+ Response 200 (application/json)

    + Attributes (array[Product])

## Single Product [GET /products/{product_id}]

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

+ Response 200 (application/json)

    + Attributes (Product)

## Related products [GET /products/{product_id}/related]

Get related products. By default method returns 4 related products from any category sorted by random.
Response data (actually product list) can be refined by passing optional params in body.

***Optional Params:***
* **type** (*pointe, accessory, ware*);
* **limit** (*number between 1 and 10*);

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

    + Body
        
            {
                "limit": 2,
                "type": "pointe"
            }

+ Response 200 (application/json)

    + Attributes (array[Product])

## Product options [GET /products/{product_id}/variations]

Some products have variations by one or several options. 
This method used to return list of variables and avaluable values for it.

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}


+ Response 200 (application/json)

    + Body
        
            {
                "has_options": true,
                "options": {
                    "color": ["black", "pink", "red"],
                    "shank": ["S", "M", "H", "SS", "SH"]
                }
            }


## Product stock [GET /products/{product_id}/stock]

Gets stock for selected combination of methods.
Also list of products in stock can be limited by fitting (*it's optional*).
>***IMPORTANT!*** Number of combinations — near 100 (depending on product).

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

    + Body
        
            {
                "options": {
                    "color": "black"
                },
                "fitting": {
                    "size": 2.5,
                    "width": "XXXXX"
                }
            }

+ Response 200 (application/json)

    + Body
        
            {
                "size": {
                    0.5: {
                        "X": {
                            "status": "available",
                            "stock": 15
                        },
                        "XX": {
                            "status": "out_of_stock"
                        },
                        "XXX": {
                            "status": "on_demand",
                            "stock": 7
                        },
                        "XXXX": {
                            "status": "unavaluable"
                        },
                        "XXXX": {
                            "status": "made_to_order"
                        },
                    },
                    1: {
                        "X": {
                            "status": "available",
                            "stock": 15
                        },
                        "XX": {
                            "status": "out_of_stock"
                        },
                        "XXX": {
                            "status": "on_demand",
                            "stock": 7
                        },
                        "XXXX": {
                            "status": "unavaluable"
                        },
                        "XXXX": {
                            "status": "made_to_order"
                        },
                    },
                }
            }
            

# Group Order

Order endpoints — to create, list and show detailed order data