FORMAT: 1A
HOST: http://private-1f4d5e-grishko.apiary-mock.com
AUTHOR: FRUITWARE

# Grishkoshop API
> *Documentation written in english to stay in consistenct with common standarts*

API documentation for Android and iOS Application **«Grishko Shop — Pointe Shoes Smart Fitting»**

## Useful links

* **General API description**: https://docs.google.com/document/d/1PEUBuXbwsX-TM_rE_t4RATIioE25PqDGADb7sgrcoE8/edit#
* **Tech Specs**: https://docs.google.com/document/d/1uXg0DRWDcFajCsGXkjRdT9jvbvBh6yvmUER1uULSPjA/edit#
* **Design**: https://marvelapp.com/67d1d07/screen/51557448
* **API link**: _waiting from development_

## Dictionary Data
> *Specific listings of given values, grabbed from **https://grishkoshop.com***

### Countries List

* US — USA
* GB — United Kingdom
* KR — Repulic of Korea
* AUS — Australia
* JP — Japan
* DE — Germany, EU
* FR — France
* ES — Spain
* CA — Canada
* BR — Brazil
* BS — Bahamas
* BT — Bhutan
* BW — Botswana
* BY — Belarus
* BZ — Belize
* KE — Kenya
* KG — Kyrgyzstan
* KH — Cambodia
* KI — Kiribati
* KM — Comoros
* KP — North Korea
* GA — Gabon
* UY — Uruguay
* UZ — Uzbekistan
* VA — Vatican
* VC — Saint Vincent and the Grenadines
* VE — Venezuela
* VG — British Virgin Islands
* VI — U.S. Virgin Islands
* VN — Vietnam
* VU — Vanuatu
* WF — Wallis and Futuna
* WS — Samoa
* XK — Kosovo
* YE — Yemen
* YT — Mayotte
* ZA — South Africa
* ZM — Zambia
* ZW — Zimbabwe
* CC — Cocos Islands
* CD — Democratic Republic of the Congo
* CF — Central African Republic
* CG — Republic of the Congo
* CI — Ivory Coast
* CK — Cook Islands
* CL — Chile
* CM — Cameroon
* CN — China
* CO — Columbie
* CR — Costa Rica
* CU — Cuba
* CV — Cape Verde
* CX — Christmas Island
* CY — Cyprus, EU
* CZ — Czech Republic
* AW — Aruba
* AZ — Azerbaijan
* BA — Bosnia and Herzegovina
* BB — Barbados
* BD — Bangladesh
* BE — Belgium
* BF — Burkina Faso
* BG — Bulgaria
* BH — Bahrain
* BI — Burundi
* BJ — Benin
* BM — Bermuda
* BN — Brunei
* BO — Bolivia
* AD — Andora
* AE — UAE
* AF — Afganistan
* AG — Antigua and Barbuda
* AI — Anguilla
* AL — Albania
* AN — Netherlands Antilles
* AO — Angola
* AR — Argentina
* AS — American Samoa
* AT — Austria
* EST — Estonia
* ET — Ethiopia
* FI — Finland
* FJ — Fiji
* FK — Falkland Islands
* FM — Micronesia
* FO — Faroe Islands
* DJ — Djibouti
* DK — Denmark
* DM — Dominica
* DO — Dominican Republic
* DZ — Algeria
* EC — Ecuador
* EG — Egypt
* EH — Western Sahara
* ER — Eritrea
* GD — Grenada
* GE — Georgia
* GH — Ghana
* GI — Gibraltar
* GM — Gambia
* GN — Guinea
* GQ — Equatorial Guinea
* GR — Greece
* GT — Guatemala
* GU — Guam
* GW — Guinea-Bissau
* GY — Guyana
* HK — Hong Kong
* HN — Honduras
* HR — Croatia
* HT — Haiti
* HU — Hungary
* CH — Switzerland
* CHN — China
* ID — Indonesia
* IE — Ireland
* IL — Izrael
* IN — India
* IO — British Indian Ocean Territory
* IQ — Iraq
* IR — Iran
* IS — Island
* IT — Italy
* JM — Jamaica
* JO — Jordan
* KW — Kuwait
* KY — Cayman Islands
* KZ — Kazakhstan
* LA — Laos
* LB — Lebanon
* LC — Saint Lucia
* LI — Liechtenstein
* LK — Sri Lanka
* LR — Liberia
* LS — Lesotho
* LT — Lithuania
* LU — Luxembourg
* LV — Latvia
* LY — Libya
* M — Malta, EU
* MA — Morocco
* MC — Monako
* MD — Moldova
* ME — Montenegro (Republic of Montenegro)
* MG — Madagascar
* MH — Marshall Islands
* MK — Makedonia
* ML — Mali
* MM — Myanmar
* MN — Mongolia
* MP — Northern Mariana Islands
* MR — Mauritania
* MU — Mauritius
* MV — Maldives
* MW — Malawi
* MX — Mexico
* MY — Malaysia
* MZ — Mozambique
* NA — Namibia
* NC — New Caledonia
* NE — Niger
* NG — Nigeria
* NI — Nicaragua
* NL — Netherlands
* NO — Norway
* NP — Nepal
* NR — Nauru
* NU — Niue
* NZ — New Zeland
* OM — Oman
* PA — Panama
* PE — Peru
* PF — French Polynesia
* PG — Papua New Guinea
* PH — Philippines
* PK — Pakistan
* PL — Poland
* PR — Puerto Rico
* PS — Palestine
* PT — Portugal
* PW — Palau
* PY — Paraguay
* QA — Qatar
* RE — Reunion
* RO — Romania
* RS — Serbia
* RU — Russia
* RW — Rwanda
* SA — Saudi Arabia
* SB — Solomon Islands
* SC — Seychelles
* SD — Sudan
* SE — Sweden
* SG — Singapore
* SI — Slovenia
* SJ — Svalbard and Jan Mayen
* SK — Slovakia
* SL — Sierra Leone
* SM — San Marino
* SN — Senegal
* SO — Somalia
* SR — Suriname
* ST — Sao Tome and Principe
* STC — Scotland
* SV — El Salvador
* SY — Syria
* SZ — Swaziland
* TC — Turks and Caicos Islands
* TD — Chad
* TG — Togo
* TH — Thailand
* TJ — Tajikistan
* TK — Tokelau
* TL — East Timor
* TM — Turkmenistan
* TN — Tunisia
* TO — Tonga
* TR — Turkey
* TT — Trinidad and Tobago
* TV — Tuvalu
* TW — Taiwan
* TZ — Tanzania
* UA — Ukraine
* UG — Uganda

### US and Canada States List

* AL — Alabama, US
* AK — Alaska, US
* AZ — Arizona, US
* AR — Arkansas, US
* AA — Armed Forces America
* AE — Armed Forces Europe
* AP — Armed Forces Pacific
* CB — British Columbia, CA
* CA — California, US
* CO — Colorado, US
* CT — Connecticut, US
* DE — Delaware, US
* DC — District of Columbia, US
* FL — Florida, US
* GA — Georgia, US
* HI — Hawaii, US
* ID — Idaho, US
* IL — Illinois, US
* IN — Indiana, US
* IA — Iowa, US


# Data Structures


## User (object)

+ id: 1 (number, required)
+ email: test@fruitware.ru (string, required)
    Valid email address
+ cellphone: `+70951234578` (string, required)
    International mobile phone number
+ first_name: `Ted` (string)
    First name
+ last_name: `Hancock` (string)
    Last name
+ password: `qwerty` (string)
    Used to register user only. Not needed in responses.
+ password2: `qwerty` (string)
    Used to register user only. Should match first password. Not needed in responses.
+ country: `RU` (enum[string], required)
    Value from the Countries dictionary
+ state: `AL` (enum[string], optional)
    Value from the Countries dictionary used only when US country selected
+ phone: `+3731234567890` (string, optional)
    International phone number
+ type: `personal` (enum[string], required)
    
    + Members
    
        + `company`
        
+ email_status: true (boolean, required)
    E-mail subscription status
+ company_name: `Some Cool LLC` (string, optional)
    Required only if type is **company**
+ company_identity: `223233232` (string, optional)
    Required only if type is **company**
+ company_vat_number: `223233232` (string, optional)
    Required only if type is **company**
+ smartfitting_done: true (boolean, required)
    if customer used fitting mechanism
+ smartfitting_date: `2018.12.24 23:10:10` (string, optional)
    Date and time when fitting was stored
+ smartfitting_lsize: `1/2` (string, optional)
    stored GRISHKO ® SIZE for left foot
+ smartfitting_rsize: `1/2` (string, optional)
    stored GRISHKO ® SIZE for right foot
+ smartfitting_lvamp: 65 (number, optional)
    Vamp height for left foot in mm
+ smartfitting_rvamp: 65 (number, optional)
    Vamp height for left foot in mm
+ smartfitting_shank (enum[string], optional)
    The pointe shoe insole shank

    + Default: `SF`
    
    + Members
        + `S`
            soft
        + `M`
            medium
        + `H`
            hard
        + `SS`
            super soft
        + `SH`
            super hard
        + `LM`
            light medium
        + `LH`
            light hard
        + `SF`
            soft flexible
        + `MF`
            medium flexible
        + `SHF`
            super hard flexible

+ created_at: `2018.12.24 23:10:10` (string, required)
    Registration Date and Time
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Last profile update Date and Time. Default value is equal to created_at property

## Address (object)

+ id: 2 (number, required)
+ user_id: User.id (required)
    Parent User object
+ type: `billing` (enum[string], required)
    
    + Members
    
        + `delivery`

+ firstname: `John` (string, required)
+ lastname: `John` (string, required)
+ company_name: `Some Cool LLC` (string, optional)
    Required only for the **Company** account
+ company_identity: `223233232` (string, optional)
    Required only for the **Company** account
+ company_vat_number: `223233232` (string, optional)
    Required only for the **Company** account
+ country: `RU` (enum[string], required)
    Value from the Countries dictionary
+ state: `AL` (enum[string], optional)
    Value from the Countries dictionary used only when US country selected
+ city: `London` (string, required)
+ street: `Baker Street` (string, optional)
+ house: `13/b` (string, required)
    Street house number with a possible index, modificator etc.
+ app: `1` (string, optional)
    Appartment or office room number
+ zipcode: `20567` (string, required)
    ZIP-code of the given address
+ cellphone: `+709512345678` (string, optional)
    International mobile phone number
+ phone: `+3731234567890` (string, optional)
    International phone number



## Product (object)

+ id: 123 (number, required)
+ name: `0509 GRISHKO 2007` (string, required)
+ vendor_code: `0509/2` (string, required)
+ teaser: `The model has a U-shaped medium vamp and slightly tapered box shape. LAST TYPE: Grishko-2007` (string, required)
+ thumbnail: `https://grishkoshop.com/App_Firma/Data/Products/0100000000000028_1_0509_Grishko-2007_jpg_636691639230000000.jpg` (string, required)
+ has_gallery: true (boolean, required)
+ gallery: [`https://grishkoshop.com/App_Firma/Data/Products/0100000000000028_1_0509_Grishko-2007_jpg_636691639230000000.jpg`,`https://grishkoshop.com/App_Firma/Data/Products/0100000000000028_1_0509_Grishko-2007_jpg_636691639230000000.jpg`] (array, optional)
+ price: 345.78 (number, required)
    Price without VAT
+ price_vat: 414.94 (number, required)
    Full price with VAT
+ currency: `USD` (string, required)
    Currency can vary depending on country
+ age_group: `adult` (string, optional)
+ gender: `male` (string, optional)
+ colour: `pink` (string, optional)
+ type (enum[string], required)

    + Default: `pointe`
    
    + Members
        + `pointe`
        + `accessory`
        + `wear`
        
+ created_at: `2018.12.24 23:10:10` (string, required)
    Date and time of transportation request
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Date and time of last updated

## Order (object)

+ id: 123 (number, required)
+ user_id: User.id (required)
    related customer profile
+ currency: `EUR` (string, required)
    order currency *applyable* to all order prices and amount
+ delivery_method: `ups` (string, required)
    Delivery method name, used as the string to avoid dropped relations
+ delivery_price: 12 (number, required)
+ delivery_free: false (boolean, required)
+ delivery_free_limit: 120 (number, optional)
    minimal sum of order to get free delivery if there is free delivery option enabled
+ delivery_alltogether: true (boolean, required)
    to delivery items separatelly or only alltogether
+ payment_method: `creditcard` (enum[string], required)
    
    + Members
        + `paypal`
        + `cash`

+ discount_applied: true (boolean, required)
+ discount_code: `BLACKFRIDAY` (string, optional)
    Some discount code, applicated to this order
+ discount_amount: 234 (number, optional)
+ discount_currency: `EUR` (string, optional)
+ note: `some note` (string, optional)
+ array[object]
    
    + Attributes
        + product_id: Product.id (required)
            Related product ID
        + product_title: `MIRACLE POINTE SHOES` (string, required)
            Related product Name
        + width: `XX` (enum[string], optional)
            Optional parametr applicable for some products
        + size: 0.5 (enum[number], optional)
            Optional parametr applicable for some products
        + Shank: `LM` (enum[number], optional)
            Optional parametr applicable for some products
        + quantity: 3 (number, required)
        + price: 23 (number, required)
        + price_vat: 27.6 (number, required)
        + amount: 69 (number, required)
        + amount_vat: 82.8 (number, required)
        + delivered_number: 0 (number, required)
            Number of delivered products (e.g. customer ordered 10 pairs and till now got 6)
        + array[object]
        
            + Attributes
                + option_name: `color` (string, required)
                + option_value: `pink` (string, required)
+ billing_address: Address.id
    related billing address
+ delivery_address: Address.id
    related delivery address
+ tracking_number: `2337d787d728h3` (string, optional)
    Number given by delivery service
+ tracking_url: `https://ups.com/check/2337d787d728h3` (string, optional)
    URL on delivery service website to track parsel
+ status: `pending` (enum[string], required)
    
    + Members
        + `processing`
        + `failed`
        + `completed`
        + `dispatched`
        + `paid`
        + `cancelled`
        + `refunded`
        + `sent`
        
+ created_at: `2018.12.24 23:10:10` (string, required)
    Date and time of creation
+ dispatched_at: `2018.12.24 23:10:10` (string, optional)
    Date and time of parsel's dispatch
+ updated_at: `2018.12.24 23:10:10` (string, required)
    Date and time of last update

# Group User
In general application doesn't allow any usage without authentification.

Sequence of actions depends on client flow and is covered by exhaustive variety of scenarios below:
* **Client opened the app for the very first time**:
    1. **POST:** `/user/letmein` User is required to fulfil only phone number field to login or register;
    2. *Server validates phone and sends User sms with special code to verify*;
    3. **POST:** `/user/sms` User is expected to enter code received in sms-message;
    4. **GET:** `/user/sms` In case there is no sms for some time User can request one more sms-message with new code;
    5. *After confirmation of phone number server returns the Authorization Token with unlimited term of valiability + User data*;
* **Client has had account on cesnok.ru**:
    1. **POST:** `/user/convert` To convert website profile into app profile user is expected to input email and password used to authentificate him on the website;
    2. **POST:** `/user/phone` Valid phone number is required to finish process of convertion account;
    3. *Server validates phone and sends User sms with special code to verify*;
    4. **POST:** `/user/sms` User is expected to enter code received in sms-message;
    5. **GET:** `/user/sms` In case there is no sms for some time User can request one more sms-message with new code;
    6. *After confirmation of phone number server returns the Authorization Token with unlimited term of valiability + User data*;

## Auth by phone [/user/letmein]
Application can authentificate user only by phone-number.
It can be achieved with help of sms-codes.
To avoid useless waste of money authorisation token with unlimited term of valiability.

### Login or register [POST]

+ Request (application/json)

    + Attributes
        + phone: `0951234567` (required, string)
            Valid russian mobile phone number without +7 and formatting. Pure numbers.

+ Response 200 (application/json)

    + Attributes
        + auth_session: `098f6bcd4621d373cade4e832627b4f6` (required,string)
            32-symbol code of current authentification session
        + is_registered: true (boolean, required)
            due to both login and register functional server responding with registered flag
            

## SMS message [/user/sms]
To proceed user requires SMS-message with code. It should be requested from this URL.
Sms processing — application sends both phone and auth-session data to keep auth session and notify server about phone number.

* *In case user didn't get any SMS he can request a new one. Only after 60 seconds!*
* **The limit is 3 sms-messanages per session and then 24-hours block.**

### Request SMS with code [POST]

+ Request (application/json)

    + Attributes
        + phone: `0951234567` (required,string)
            Valid russian mobile phone number without +7 and formatting. Pure numbers.
        + auth_session: `098f6bcd4621d373cade4e832627b4f6` (required,string)
            32-symbol code of current authentification session
        
+ Response 200 (application/json)

    + Attributes
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (required,string)
            32-symbol code of current authentification session
        + is_sms_sent: true (boolean, required)
            Flag which indicates that SMS-code was sent successfuly

## Confirm code from SMS [/user/confirm]
Since API notifies app that sms was sent successfuly — the only thing left to get auth token is confirm sms-code.
This method is used to send sms-code, session identifier and phone number.


### Send code, phone and auth-session [POST]
+ Request (application/json)

    + Attributes
        + phone: `0951234567` (required,string)
            Valid russian mobile phone number without +7 and formatting. Pure numbers.
        + auth_session: `098f6bcd4621d373cade4e832627b4f6` (required,string)
            32-symbol code of current authentification session
        + code: 124232 (required,number)
            6-digits verification code from sms-message

+ Response 200 (application/json)
    
    + Attributes 
        + user (User)
            User object
        + session_token: `098f6bcd4621d373cade4e832627b4f6` (required,string)
            32-symbol code of current permanent session (valid for 1 year)


## Website user login [/user/login]
Method to login with email and password from cesnok.ru account.
After receiving auth_session in case email-password pair was correct app should request sms-confirmation in normal mode.

### Login with email and password [POST]

+ Request (application/json)

    + Attributes
        + email: `test@cesnok.ru` (required,string)
            Valid email address
        + password: `qwerty` (required,string)
            Valid password for the account on https://cesnok.ru

+ Response 200 (application/json)

    + Attributes
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (required,string)
            32-symbol code of current authentification session

## Website user set phone [/user/phone]
Method to set phone number for user while login in though the website.
Server sent SMS-code right after receiving the email to avoid additional requests.

### Set phone [POST]

+ Request (application/json)

    + Attributes
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (required,string)
            32-symbol code of current authentification session
        + phone: `0951234567` (required,string)
            Valid russian mobile phone number without +7 and formatting. Pure numbers.

+ Response 200 (application/json)

    + Attributes
        + auth_session: "098f6bcd4621d373cade4e832627b4f6" (required,string)
            32-symbol code of current authentification session
        + is_sms_sent: true (boolean, required)
            Flag which indicates that SMS-code was sent successfuly


## Recover Password [/user/remind]
Method to recover password from cesnok.ru

### Request password recover [POST]

+ Request (application/json)

    + Attributes
        + email: `test@cesnok.ru` (required,string)
            Valid email address

+ Response 200 (application/json)

    + Attributes
        + is_email_sent: true (required,boolean)
            Email with recover info was sent successfully

## User Logout [/user/logout]
Method to log user out

### Request password recover [POST]

+ Request (application/json)

    + Attributes
        + token: `d015ac61626bf2e1c67d8828945b0f53` (required,string)
            Identification token. Unique single-per-user 32-symbol code to identify successfully logged in User.

+ Response 200 (application/json)

    + Attributes
        + is_logged_out: true (required,boolean)
            Session was dropped



## User profile [/user]

> **This methods require token and can be requested only after authorization**

### Get profile object [GET]
    
This method requiresDespite sending whole User object while updating the profile there is only two editable fields — **email** and **inn**.
This fields can be updated only in case user has no previously stored values.
**There is no possibility to changes once stored information.**

+ Request (application/json)
    
    + Attributes
        + token: `d015ac61626bf2e1c67d8828945b0f53` (required,string)
            Identification token. Unique single-per-user 32-symbol code to identify successfully logged in User.


+ Response 200 (application/json)

    + Attributes (User)

### Update profile info [POST]
    
+ Request (application/json)

    + Attributes (User)
        + email (optional,string)
        + inn (optional, string)
        + first_name (optional, string)
        + last_name (optional, string)

+ Response 200 (application/json)

    + Attributes (User)


# Group Request

Basically all request data is gathered from other API (cesnok.ru).
This API only awaits to be notified about driver's interest in single Cargo Request.

> **Important! Any request update can be possible if the App has an active internet connection.**
> **Otherwise App handle it offline.**

1. Check the actual Request status before allowing User to apply.
2. Apply to the Request online.

## Apply to request path [/request/apply/{id}]

+ Parameters
    + id (required number)
        Request ID

# Group Products

Methods to interact with collection of Products or with single product

## Get all products [GET /products]

By default no JSON-object in body required.
Depending on parameters, sent in Body JSON Server will return only suitable products which conduct sent conditions.
Meanwhile Accept-Language, Token and Country are required to be passed in header. It affects price, avaluability and content.

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

    + Body
        
            {
                "category_id": 13,
                "fitting": {
                    "size": 2.5,
                    "width": "XXX",
                    "shank": "SS"
                }
            }

+ Response 200 (application/json)

    + Attributes (array[Product])

## Single Product [GET /products/{product_id}]

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

+ Response 200 (application/json)

    + Attributes (Product)

## Related products [GET /products/{product_id}/related]

Get related products. By default method returns 4 related products from any category sorted by random.
Response data (actually product list) can be refined by passing optional params in body.

***Optional Params:***
* **type** (*pointe, accessory, ware*);
* **limit** (*number between 1 and 10*);

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

    + Body
        
            {
                "limit": 2,
                "type": "pointe"
            }

+ Response 200 (application/json)

    + Attributes (array[Product])

## Product options [GET /products/{product_id}/variations]

Some products have variations by one or several options. 
This method used to return list of variables and avaluable values for it.

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}


+ Response 200 (application/json)

    + Body
        
            {
                "has_options": true,
                "options": {
                    "color": ["black", "pink", "red"],
                    "shank": ["S", "M", "H", "SS", "SH"]
                }
            }



## Product stock [GET /products/{product_id}/stock]

Gets stock for selected combination of methods.
Also list of products in stock can be limited by fitting (*it's optional*).
>***IMPORTANT!*** Number of combinations — near 100 (depending on product).

+ Request (application/json)

    + Headers

            Accept-Language: ru
            Accept-Charset: utf-8
            Token: {token}
            Country: {country}

    + Body
        
            {
                "options": {
                    "color": "black"
                },
                "fitting": {
                    "size": 2.5,
                    "width": "XXXXX"
                }
            }

+ Response 200 (application/json)

    + Body
        
            {
                "size": {
                    0.5: {
                        "X": {
                            "status": "available",
                            "stock": 15
                        },
                        "XX": {
                            "status": "out_of_stock"
                        },
                        "XXX": {
                            "status": "on_demand",
                            "stock": 7
                        },
                        "XXXX": {
                            "status": "unavaluable"
                        },
                        "XXXX": {
                            "status": "made_to_order"
                        },
                    },
                    1: {
                        "X": {
                            "status": "available",
                            "stock": 15
                        },
                        "XX": {
                            "status": "out_of_stock"
                        },
                        "XXX": {
                            "status": "on_demand",
                            "stock": 7
                        },
                        "XXXX": {
                            "status": "unavaluable"
                        },
                        "XXXX": {
                            "status": "made_to_order"
                        },
                    },
                }
            }